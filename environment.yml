---
#export AWS_ACCESS_KEY_ID=XXXXXXXXXXXXXXXXXXXXXx
#export AWS_SECRET_ACCESS_KEY=XXXXXXXXXXXXXXXXXXxxx
#export ANSIBLE_HOST_KEY_CHECKING=False
#ansible-playbook -i ec2.py environment.yml -v

#- hosts: localhost
#  connection: local
#  gather_facts: no
#  vars:
#    vpc_name: "registry vpc"
#    security_group_name: "registry"
#    cidr_block: "10.0.0.0"
#    registry_vpc: true
#  roles:
#    - vpc


- hosts: localhost
  connection: local
  gather_facts: no
  vars:
    security_group_name: "registry"
    subnet_id: subnet-3078e154
    aws_region: "us-east-1"
    aws_zone: "us-east-1a"
  tasks:
      - name: EC2 provisioning of the registry machine
        ec2:
            region: "{{ aws_region }}"
            zone: "{{ aws_zone }}"
            key_name: mrivera
            instance_type: t2.small
            image: ami-da05a4a0
            wait: yes
            assign_public_ip: yes
            group:
                - "{{security_group_name}} Security Group"
            vpc_subnet_id: "{{ subnet_id }}"
            instance_tags:
                Name: registry
                Role: registry
            exact_count: 1
            count_tag:
                Name: registry
            volumes:
                - device_name: /dev/xvda
                  volume_size: 100
        register: ec2

      - name: Wait for SSH to come up
        wait_for: host={{ ec2.instances[0].public_ip }} port=22 delay=10 timeout=240 state=started
        when: 
          - ec2|changed

      - ec2_instance_facts:
          filters:
            "tag:Name": registry
            instance-state-name: running
          region: us-east-1
        register: instances_found

      - name: Gathering public ips from tagged instances
        set_fact:
          public_ips: "{{ (public_ips|default([])) + [item.network_interfaces[0].association.public_ip] }}"
        with_items:
          - "{{ instances_found.instances }}"

      - name: Gathering public ips from provisioned instances
        set_fact:
          public_ips: "{{ (public_ips|default([])) + [item] }}"
        with_items:
          - "{{ ec2.instances[0].public_ip }}"
        when: 
          - ec2|changed

      - name: Add the host to the group to be provisioned
        add_host: name={{ item }} groupname=to_be_provisioned
        with_items:
          - "{{ public_ips }}"

      - debug: var=public_ips
        when: 
          - log_var is defined
          - log_var is true

- hosts: to_be_provisioned
  sudo: yes
  remote_user: ubuntu
  roles: 
    - common_server
    - docker

  #this line is because ubuntu 16.04 doesn't have python
  gather_facts: no
  vars:
    registry_volume: /mnt/registry
  tasks:

    - name: installing docker-py
      pip: name="docker-py"

    - name: creating registry volume folder
      file: path="{{ registry_volume }}" state="directory"
      when: registry_volume is defined

    - name: running a docker registry
      docker: 
        image: "registry:2"
        name: registry
        ports:
          - 5000:5000
        restart_policy: always
        state: started
        volumes: "{{ registry_volume }}:/var/lib/registry"

    - name: Finished
      debug: msg="Finished"
